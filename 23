from collections import deque
from typing import Optional
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return root
        node_queue = deque([root])
        level_sums = []
        while node_queue:
            level_sum = 0
            level_size = len(node_queue)
            for _ in range(level_size):
                current_node = node_queue.popleft()
                level_sum += current_node.val
                if current_node.left:
                    node_queue.append(current_node.left)
                if current_node.right:
                    node_queue.append(current_node.right)
            level_sums.append(level_sum)
        node_queue.append(root)
        level_index = 1
        root.val = 0  
        while node_queue:
            level_size = len(node_queue)
            for _ in range(level_size):
                current_node = node_queue.popleft()
                sibling_sum = 0
                if current_node.left:
                    sibling_sum += current_node.left.val
                if current_node.right:
                    sibling_sum += current_node.right.val
                if current_node.left:
                    current_node.left.val = level_sums[level_index] - sibling_sum
                    node_queue.append(current_node.left)
                if current_node.right:
                    current_node.right.val = level_sums[level_index] - sibling_sum
                    node_queue.append(current_node.right)
            level_index += 1
        return root
if __name__ == '__main__':
    root = TreeNode(1)
    root.left = TreeNode(2)
    root.right = TreeNode(3)
    root.left.left = TreeNode(4)
    root.left.right = TreeNode(5)
    root.right.left = TreeNode(6)
    root.right.right = TreeNode(7)
    solution = Solution()
    new_root = solution.replaceValueInTree(root)
    def print_tree(node):
        if not node:
            return
        print(f"Node value: {node.val}")
        print_tree(node.left)
        print_tree(node.right)
    print_tree(new_root)
