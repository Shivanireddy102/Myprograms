from typing import List

class Solution:
    def minimumMountainRemovals(self, nums: List[int]) -> int:
        N = len(nums)
        lis_length = self.getLongestIncreasingSubsequenceLength(nums)
        nums.reverse()
        lds_length = self.getLongestIncreasingSubsequenceLength(nums)
        lds_length.reverse()
        max_bitonic_len = 0
        for i in range(1, N - 1):
            if lis_length[i] > 1 and lds_length[i] > 1:
                max_bitonic_len = max(max_bitonic_len, lis_length[i] + lds_length[i] - 1)
        return N - max_bitonic_len
    def getLongestIncreasingSubsequenceLength(self, nums: List[int]) -> List[int]:
        lis_len = [1] * len(nums)
        lis = [nums[0]]
        for i in range(1, len(nums)):
            index = self.lowerBound(lis, nums[i])
            if index == len(lis):
                lis.append(nums[i])
            else:
                lis[index] = nums[i]
            lis_len[i] = len(lis)
        return lis_len
    def lowerBound(self, lis: List[int], target: int) -> int:
        left, right = 0, len(lis)
        while left < right:
            mid = left + (right - left) // 2
            if lis[mid] < target:
                left = mid + 1
            else:
                right = mid
        return left
if __name__ == "__main__":
    solution = Solution()
    nums = [2, 1, 1, 5, 6, 2, 3, 1]
    print(solution.minimumMountainRemovals(nums)) 
