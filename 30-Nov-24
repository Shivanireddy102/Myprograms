import heapq
from typing import List
class Solution:
    def validArrangement(self, pairs):
        from collections import defaultdict, deque
        adjacencyMatrix = defaultdict(deque)
        inDegree, outDegree = defaultdict(int), defaultdict(int)
        for pair in pairs:
            start, end = pair
            adjacencyMatrix[start].append(end)
            outDegree[start] += 1
            inDegree[end] += 1
        result = []
        def visit(node):
            while adjacencyMatrix[node]:
                nextNode = adjacencyMatrix[node].popleft()
                visit(nextNode)
            result.append(node)
        startNode = -1
        for node in outDegree:
            if outDegree[node] == inDegree[node] + 1:
                startNode = node
                break
        if startNode == -1:
            startNode = pairs[0][0]
        visit(startNode)
        result.reverse()
        pairedResult = [
            [result[i - 1], result[i]] for i in range(1, len(result))
        ]
        return pairedResult
solution=Solution()
pairs =[[5,1],[4,5],[11,9],[9,4]]
print(solution.validArrangement(pairs))
