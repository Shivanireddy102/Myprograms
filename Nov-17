from collections import deque
from typing import List

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        prefix_sums = [0] * (n + 1)
        for i in range(n):
            prefix_sums[i + 1] = prefix_sums[i] + nums[i]
        min_length = float('inf')
        deq = deque()
        for i in range(n + 1):
            while deq and prefix_sums[i] - prefix_sums[deq[0]] >= k:
                min_length = min(min_length, i - deq.popleft())
            while deq and prefix_sums[i] <= prefix_sums[deq[-1]]:
                deq.pop()
            deq.append(i)
        return min_length if min_length != float('inf') else -1
        
solution = Solution()
nums = [2, -1, 2]
k = 3
print(solution.shortestSubarray(nums, k))  # Output: 3
